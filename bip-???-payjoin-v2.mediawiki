<pre>
  BIP: ???
  Title: Serverless Payjoin
  Author: Dan Gould <d@ngould.dev>
  Replaces: 78
  Status: Draft
  Type: Standards Track
  Created: 2023-04-08
  License: BSD-2-Clause
</pre>

==Abstract==

This document proposes a second version of the payjoin protocol described in BIP 78, allowing full payjoin receiver functionality including payment output substitution without the requirement to host a secure public endpoint. This requirement is replace with network protocols available in all modern web browsers.

===Copyright===

This BIP is licensed under the 2-clause BSD license.

==Motivation==

Payjoin[^1] solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs "necessarily reveal that their inputs were owned by the same owner."[^2] Breaking that common-input ownership assumption requires contributions from multiple owners via interaction, namely hosting a server endpoint secured by a certificate on the receiving side either via TLS or Tor onion hidden service. Because the protocol is synchronous, both sender and reciever must be online to payjoin. These problems of convenience have been identified as the greatest barriers to widespread payjoin adoption.[^3]

===Relation to BIP 78 (Payjoin v1)===

The BIP 78 standard allows for an [[#|unsecured payjoin server|]] to operate separately from the so-called "payment server" which generates [[bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages are neither authenticated nor encrypted a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring [[payment output substitition]] to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition without compromising sender or receiver privacy.

Although server separation is mentioned in BIP 78, no specification exists to deploy them. This document specifies one. The opportunity to make the protocol asynchronous is also taken.

The protocols in this document reuse BIP 78's BIP 21 URI parameters in order to reduce the size of v2 URIs and their QR code representations. It also provides a downgrade mechanism for unsecured payjoin relay to support v1 senders without modification. A timeout parameter is introduced better coordinate the synchronous v1 protocol.

==Specification==

===Overview===

Instead of a public http endpoint, this scheme allows a streaming client to act as a reciever. Requests are relayed via a server hosting , and symmetric cryptography for security. Without a replacement for secured networking, the relay could steal funds. Aside from a pre-shared secret and relayed networking, the PSBT protocol takes the same form as the existing BIP 78 spec.

===Basic scheme===

The recipient first generates a 256-bit key psk. This pre-shared key will be the basis of end to end encryption over the relay.

Rather than hosting a public server, they may allocate a subdirectory from to the http relay and start a streaming session to receive messages. This allocation includes the first 8 characters of the hash of their PSK as an identifier where they can be reached by another client. They await a payjoin request on this session. Out of band, they share a BIP 21[^5] payjoin uri including the relay endpoint in the <code>pj</code> query parameter and the pre-shared key in a new <code>psk</code> query parameter.

The sender constructs their request containing a PSBT and optional parameters as in BIP 78. They construct an encrypted an authenticated payload from this data<!-- noise framework NNpsk0[^6] pattern message A with he original PSBT as the payload using psk to encrypt then MAC-->. The resulting ciphertext ensures message secrecy and integrity when sent to the recipient by the relay hosted <code>pj</code> endpoint.

The pay-to-endpoint proceeds as in BIP 78. The sender's request is relayed to the receiver over their streaming session via the relay allocation. Messages are secured by symmetric cryptography <!--the noise NNpsk0 pattern--> rather than TLS or Onion routing session key.

===V2 Payjoin Protocol===

Payjoin v2 messages use [[bip-0370.mediawiki|BIP 370 PSBT v2]] format to simplify PSBT mutation and obsolete the transaction finalizer.

Assuming the receiver has already allocated space according to the [[#allocation|allocation protocol]] the relay, the payjoin protocol follows these steps. Steps required only when using a relay are prefixed [relay].

* The receiver of the payment, pre-shares a [[bip-0021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint and parameter <code>psk=</code> with 256-bit secret key.
* The sender creates a complete signed PSBT. We call this the <code>Fallback PSBT</code>, akin to BIP 78's Original PSBT. This Fallback PSBT and optional sender parameters are encrypted then authenticated with the <code>psk</code> using symmetric encryption and is transmitted to the payjoin endpoint.
* [relay] If the receiver is online, the relay transmits the payload to the reciver, else it responds with a success code notifying the sender that the receiver is offline.
* The receiver processes the payload, modifies the PSBT invalidating sender signatures. It updates it to include its signed inputs and outputs. It signs its inputs. We call this the <code>Payjoin PSBT</code>, akin to BIP 78's <code>Payjoin proposal PSBT</code>. It responds with the Payjoin PSBT encrypted then authenticated under psk.
* [relay] The relay awaits a connection from the sender. Upon connection, it relays the encrypted Payjoin PSBT to the sender.
* The sender validates the Payjoin PSBT, signs his inputs broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.

The Fallback Payload is sent in an HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.
The Payjoin PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.

To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.

Because the payloads themselves are encrypted, the protcol is safe to transmit over unsecured network protocols. Senders MAY accept a url representing unencrypted, unauthenticated connections.

The Fallback PSBT MUST:
* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.
* Be signed.
* Be broadcastable.
<!-- * Not include fields unneeded for the receiver such as global xpubs or keypath information. (? curious if PSBTv2 obviates this requirement, I believe it does) -->

The Fallback PSBT MAY:
* Have outputs unrelated to the payment for batching purpose.

The Payjoin PSBT MUST:
* Use all the inputs from the Fallback PSBT.
* Use all the outputs which do not belongs to the receiver from the original PSBT.
<!-- * Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>) -->
* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.

The Payjoin PSBT sender MAY:
* Add, remove or modify Fallback PSBT outputs under the control of the receiver (i.e. not sender change).

The Payjoin PSBT MUST NOT:
* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.
* Decrease the absolute fee of the original transaction.

===Serverless Relay Allocation Protocol===

A relay hosts both an HTTP server to service BIP 78 requests from the sender and a streaming server with WebTransport. The relay protocol is inspired by TURN.

Relay allocation and usage takes the following steps

* First, the client contacts a Relay server with an "Allocate" request. The Allocate request asks the relay to allocate some of its resources for the client so that it may contact a peer. If allocation is possible, the server allocates an address for the client to use as a relay, and sends the client an "Allocation Successful" response, which contains an "allocated relayed transport address " subdirectory located at the TURN server. 
* Second, the client sends in a CreatePermissions request to the Relay server to create a permissions check system for peer-server communications. In other words, when a sender is finally contacted and sends information back to the Relay to be relayed to client, the Relay uses the permissions to verify that the peer-to-TURN server communication is valid (by checking psk signature). 
* A receiver enrolls at the relay's allocation endpoint including relevant authentication headers to prevent DoS. An API token, proof of work, ecash, or payment of a lightning invoice could all impose cost to prevent DoS
* The relay responds with an allocation identifier subdirectory <!-- The relay may need to keep multiple mailboxes for requests and some way to identify senders if it's re-using one. Or maybe all the (encrypted) data can be pushed and they can just try to decrypt to get it. the receiver should be the one to delete encrypted PSBT after receipt or have it automatically go stale by the server --> 
* Upon receiving a POST request to payjoin, the server relays the request to the receiver, otherwise it holds onto it until it starts a session with the server again
* A sender who went offline after receiving success response but "receiver unavailable" should make another request to the relay when it comes online and be pushed any updates at the time of their arrival from the server.

===BIP21 payjoin parameters===

This proposal is defining the following new [[bip-0021.mediawiki|BIP 21 URI]] parameters:
* <code>dl=</code>: Represents an deadline after which the sender will post the fallback transaction. Exclude for asynchronous operation of the protocol.

===<span id="optional-params"></span>Optional query parameters===

When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:

* <code>v=</code>, the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.

===Improvements===

====Offline Asynchronous Payjoins====

The relay may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naïve, surveillance-vulnerable transaction which payjoin intends to avoid. Storing such requests without requring client authentication may create a vulnerability to relay DoS attacks. More research needs to be done before such a protocol can be recommended.

The existing BIP 78 protocol has to be synchronous only for "interactive" endpoints which may be vulnerable to probing attacks. They can cover this tradeoff by demanding a fallback transaction that would not preserve privacy the same way as a payjoin. They could specify a deadline after which they will broadcast this fallback with a new deadline <code>dl=</code> <!-- I also like to for timeout --> parameter.

===Noteworthy details===

====Backwards Compatibility====

The receivers are advertising payjoin capabilities through [[bip-0021.mediawiki|BIP21's URI Scheme]].

Senders not supporting payjoin will just ignore the <code>pj</code> variable and thus, will proceed to normal payment.

Receivers may allow v1 senders to send unencrypted payloads to the relay. Payjoin relayed this way should enable <code>pjos=0</code> so that these v1 sender's disable output substitution across a relay since the v1 messages are neither encrypted nor authenticated. The relay protocol should carry as normal, bundling HTTP header, query, and body information to send to the receiver.

====Attack vectors====

Since relays store arbitrary encrypted payloads to the tragedy of the commons and denial of service attacks. Relay operators may impose an authentication requirement or proof of work before they provide relay service.

Since psk is a symmetric key, the first message containing the sender's original PSBT does not have forward secrecy.

Since the Fallback transaction is valid, even in the asynchronous setting where <code>dl=<code> is not specified, the receiver may broadcast it and lose out on ambiguous privacy protection from payjoin.

====Network Privacy====

Peers will only see the IP address of the relay but not their peer's. Relays may be made available via Tor hidden service in addition to IP to allow either of the peers to protect their IP with Tor without forcing the other to use it too.
