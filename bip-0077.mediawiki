<pre>
  BIP: 77
  Layer: Applications
  Title: Async Payjoin
  Author: Dan Gould <d@ngould.dev>
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077
  Post-History: https://github.com/bitcoin/bips/pull/1483
                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t
                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t
  Status: Draft
  Type: Standards Track
  Created: 2023-08-08
  License: BSD-2-Clause
  Requires: 21, 78, 173, 174
</pre>

==Copyright==

This BIP is licensed under the 2-clause BSD license.

==Abstract==

Payjoin lets Bitcoin senders and receivers interact to make batched
transactions.

This document proposes a backwards-compatible second version of the Payjoin protocol described in
[[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output
substitution, without requiring a receiver to host a secure public endpoint. This requirement is replaced with an
untrusted third-party "directory" server accessed via HTTP clients that communicate using an asynchronous protocol
and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives
available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] (OHTTP) to prevent
the directory and Payjoin peers from linking requests to client IP addresses.

==Motivation==

Satoshi Nakamoto pointed out one specific privacy risk in the white paper,
that transactions with multiple inputs "necessarily reveal that their inputs
were owned by the same owner." Payjoin enables distinct owners to spend their
inputs in a batch, allowing them to combine independent transfer intents into
one transaction. Thus, Payjoin can address what would come to be called
"common-input-ownership heuristic" by making interactive batching practical.

Beyond addressing Bitcoin's primal privacy risk, Payjoin interactions
can batch more intents into less block weight than the universal
non-interactive batching practice deployed by exchanges to save transaction fees. One might think of the Payjoin examplar combining a transfer with a receiver consolidation into one transaction. But Payjoin can also secure
[[https://bitcointalk.org/index.php?topic=281848.0| transaction cut-through]],
allowing a receiver to forward payments further to third parties in the
same transaction a sender funds. For example, deposits to an exchange may
"cut through" the same transaction funding withdrawals. Payjoin enables more
blockspace-efficient transactions to save users fees while addressing privacy
risks.

However, BIP 78's Payjoin version 1 requirements have proven to be an obstacle
to adoption. Version 1 receivers must
host a secured public-facing HTTP server. Mobile and web environments limit the ability to fulfil such a
requirement. Version 1 also requires synchronous communication. Both sender and receiver must be online
simultaneously. Wallet developers
[[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]]
these requirements as barriers to Payjoin adoption.

Our goal is to specify a practical coordination mechanism appropriate for
widespread implementation. To this end, the proposal leverages widespread
solutions to common problems, building on web standards and common Bitcoin
primitives.

==Overview==

Payjoin senders and receivers interact to construct a transaction. In version 2 they
exchange end-to-end encrypted asynchronous messages using a store-and-forward
directory server, which is accessed using OHTTP.
The ''receiver''  initiates the protocol by sharing a [[#payjoin-uri|Payjoin URI]]. The ''sender''
responds with a fully signed fallback transaction, known as the ''Original PSBT''.

The receiver replies with a ''Proposal PSBT'' based on the original PSBT. The
sender signs the Proposal PSBT and broadcasts it.

The sender may opt out by ignoring the payjoin information in the bitcoin URI.
Otherwise, at the next step the receiver may opt out by broadcasting the
fallback transaction in the Original PSBT.

===Sequence Diagram===

<pre>
Key:
+-----> Single transmission
+- - -> Polled transmission

+----------+                 +-----------+       +--------+  +---------+
| Receiver |                 | Directory |       | Sender |  | Network |
+----------+                 +-----------+       +--------+  +---------+
|                                  |                  |                |
|                                  |                  |                |
|      Payjoin URI (BIP 21)        |                  |                |
+---------------------------------------------------->|                |
|                                  |                  |                |
|    GET Request Original PSBT     |                  |                |
+- - - - - - - - - - - - - - - - ->|   POST Request   |                |
|                                  |  Original PSBT   |                |
|    GET Response Original PSBT    |<-----------------+                |
|<---------------------------------+   GET Request    |                |
|                                  |  Proposal PSBT   |                |
|                                  |<- - - - - - - - -+                |
|                                  |                  |                |
|                                  |                  |                |
|                                  |                  |                |
|      POST Proposal PSBT          |                  |                |
+--------------------------------->|   GET Response   |                |
|                                  |   Proposal PSBT  |                |
|                                  +----------------->|                |
|                                  |                  |   Broadcast    |
|                                  |                  |   Payjoin      |
|                                  |                  +--------------->|
|                                  |                  |                |
+                                  +                  +                +
</pre>


===Basic scheme===

Before initiating the protocol, the receiver first obtains the directory's OHTTP
configuration (which includes its OHTTP public key).

The receiver initializes a Payjoin Session by generating a secp256k1 keypair.
The public key of this keypair is the ''receiver key''. The receiver key enables
the sender to establish end-to-end authenticated encryption using Hybrid Public
Key Encryption ([[#secp256k1-hybrid-public-key-encryption| HPKE]]).

A [[#short-id| ''short ID'']] is derived as a truncated hash of the receiver
key, encoded as uppercase bech32 (without a checksum or human readable part).
The short ID is used to identify a store-and-forward mailbox on the directory
server. A ''mailbox endpoint'' is the HTTP resource whose URL has a short ID as
its path component. We refer to any key associated with a mailbox as a
''mailbox key''.

As long as a Session is active, the receiver waits for a message from the
sender, by long polling GET requests to the mailbox endpoint hosted on the server.

This information is included in the
[[#payjoin-uri| Payjoin URI]]
which the receiver shares with the sender out of band. The
<code>pj=</code> query parameter contains the mailbox endpoint URL with
additional [[#receiver-fragment-parameters| receiver fragment parameters]] that
encode the receiver key and the Payjoin Directory's [[https://www.ietf.org/rfc/
rfc9458.html#name-key-configuration| OHTTP Key Configuration]].

The sender constructs an
[[https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key|
HPKE Base mode]] payload containing the sender's ''reply key'', a PSBT and
optional parameters similar to BIP 78. The resulting ciphertext ensures message
secrecy and integrity when passed to the receiver using the mailbox endpoint.

The receiver augments the Sender's PSBT with new inputs and outputs, and may
adjust the transaction fee. The receiver then encrypts the resulting PSBT using
[[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy|
HPKE Auth mode]] to the sender's reply key, authenticated using the receiver
key. The receiver then posts this response to a new mailbox whose short ID
is derived from the sender's reply key.

The sender will be long polling the reply mailbox endpoint for a response from
the receiver. Upon receipt, the sender validates the receiver's Proposal PSBT,
and if satisfied, signs its inputs and broadcasts the transaction to the Bitcoin
network.

Sender and receiver may experience network interruption and proceed with the
protocol since their request and response are buffered in the directory.

==Specification==

===Protocol Sequence===

The Payjoin version 2 protocol takes the following steps:

* The receiver generates an ephemeral mailbox key. Its public key is known as their ''receiver key''.
* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL path ends with the [[#short-id| short ID]], bech32-encoded (without a checksum or HRP) followed by the [[#receiver-fragment-parameters| receiver fragment parameters]].
* The sender generates an ephemeral mailbox key. Its public key is known as their ''reply key''
* The sender creates a valid version 0 PSBT, the ''Original PSBT'', satisfying [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]].
* The sender's ''reply key'', the ''Original PSBT'', and optional sender parameters, are end-to-end encrypted to the ''receiver key'' using HPKE, and finally encapsulated as OHTTP using the directory's OHTTP key configuration. This is [[#send-messaging| POSTed]] to the directory's OHTTP Gateway. The request is stored in the receiver mailbox.
* The sender polls GET requests to the mailbox identified by the sender's ''reply key'' in order to await a response from the directory containing a ''Proposal PSBT''. It stops polling after expiry.
* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver mailbox]] requests to the mailbox. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the ''Original PSBT'' to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the ''Proposal PSBT''.
* The ''Proposal PSBT'' is encrypted to the sender's ''reply key'', then encapsulated in OHTTP, and POSTed to the sender's mailbox via the directory's OHTTP Gateway.
* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted ''Proposal PSBT''.
* The sender validates the ''Proposal PSBT'' according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.

<!-- TODO move these into their home. PSBT Requirements?-->
The Original PSBT MUST:

* Include complete UTXO data.
* Be fully signed.
* Exclude unnecessary fields such as global xpubs or keypath information.
* Be broadcastable.

The Original PSBT MAY:

* Include outputs unrelated to the sender-receiver transfer for batching purposes.

The Proposal PSBT MUST:

* Include all inputs from the Original PSBT.
* Include all outputs which do not belong to the receiver from the Original PSBT.
* Include complete UTXO data.
* Insert additional inputs and outputs at a random index.

The Proposal PSBT sender MAY:

* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).

The Proposal PSBT MUST NOT:

* Shuffle the order of inputs or outputs contained in the Original PSBT.
* Decrease the absolute fee of the Original PSBT.

Complete UTXO data is required because this information is required for signing
some input types.

<!-- TODO ...by receiver?-->
===OHTTP Bootstrapping===

Before initiating a Payjoin Session
a receiver must first discover the directory's OHTTP Gateway Key Configuration
via an authenticated bootstrap mechanism before it can initialize a Session to
receive payjoin requests. This mechanism may vary by implementation but must
follow
[[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|
OHTTP Consistency Requirements]] and should not reveal a receiver IP address to
the directory. Some examples of suitable mechanisms include using keys obtained
from a payjoin URI, fetching over a VPN, using keys included with an application
binary, https-in-http CONNECT method, https-in-WebSocket, or using Tor.

Directories MUST support
[[https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching|
RFC 9540 Key Configuration Fetching]] via GET requests to the directory's OHTTP
Gateway.

If a directory is subject to denial of service attacks, it may require
[[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and
otherwise respond with <code>401</code> unauthorized responses to
requests. Authorization tokens must be unlinkable to preserve client privacy. A
specific unlinkable authorization token mechanism is out of the scope of this
proposal.

===Session Initiation===

Receivers initiate sessions by sharing a Payjoin URI. Because these URIs
contain sensitive information, such as addresses, they should be shared over a
confidential channel.

====Payjoin URI====

Bitcoin URIs ([[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] or [[https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki| BIP 321]])
are a standard way to request bitcoin.

A Payjoin URI is a Bitcoin URI that contains a <code>pj</code> parameter. The
<code>pj</code> parameter is a URL in both BIP 78 and BIP 77.


The <code>pj</code> parameter must be [[#uppercase-url| uppercased and
should be the last parameter of the URI]].

=====Mailbox endpoint=====

In Payjoin version 2 the URL in the <code>pj</code> parameter is the
mailbox endpoint URL. Mailboxes are shared HTTP resources served by the directory. Clients POST messages to and GET messages from mailbox endpoints.

======Short ID======

A Short ID identifies a mailbox. The Short ID is the path component of the mailbox endpoint. They are derived by hashing the compressed secp256k1
mailbox public key with SHA-256, truncating
it to [[#64-bit-short-id| 8 bytes (64 bits)]], and encoding it in [[#uppercase-url|uppercase]] bech32 with
no checksum and with no HRP (also omitting the '1' separator).

=====Receiver fragment parameters=====

Payjoin version 2 introduces session-specific parameters which the receiver
shares encoded in the URI. 

Instead of defining new Bitcoin URI
parameters, the session-specific parameters are encoded in the
[[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the
the mailbox endpoint URL.

The <code>#</code> fragment separator character must be [[https://datatracker.ietf.org/doc/html/rfc3986#section-2.1| RFC 3986 percent-encoded]]
 as </code>%23</code>, because it is part of the mailbox endpoint URL included in the
<code>pj</code> parameter, not a fragment of the Bitcoin URI.

These session-specific parameters are [[#uppercase-url| uppercase]] bech32 encoded, with no checksum, and are separated by a <code>+</code> character and prefixed with HRPs
according to their role:
* <code>RK</code>: encodes the ''receiver key'' in compressed form. Senders will initiate HPKE with the receiver using this key.
* <code>OH</code>: encodes an alternate format of the OHTTP Key Configuration of the directory. It consists of a compressed public key of the directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration]] is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms are [[#secp256k1-hybrid-public-key-encryption| fixed]].
* <code>EX</code>: specifies a [[#session-expiration| session expiration]] in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| unix time]].

For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC</code>

====Send Messaging====

The sender constructs the fallback transaction, a typical transaction spending
funds to the receiver's address specified in the Payjoin URI. This transaction
is serialized as a PSBT, including UTXO information.

This ''Original PSBT'' is encoded as base64, followed by the query parameter string on a new line containing [[#optional-sender-parameters| optional sender parameters]].

This plaintext
string is encrypted to the receiver key according to HPKE. The HPKE <code>info</code> string, used for domain separation, is <code>PjV2MsgA</code>.

<pre>
PjV2MsgA Byte Representation (7168 bytes total)
+---------------------------------------------------------------------------------------+
| ElligatorSwift |                             Ciphertext                               |
|   (64 bytes)   |                            (7104 bytes)                              |
|                +-----------------------+---------------------------------+------------+
|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |
|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |
+---------------------------------------------------------------------------------------+
</pre>

The resulting HPKE payload is the body of a POST request to the receiver's mailbox. This request is
then encapsulated according to Oblivious HTTP to the directory's OHTTP Gateway.
OHTTP serializes the inner request as BHTTP, and provides another layer of HPKE
encryption, between the client and directory.

<pre>
OHTTP Encapsulated Message Byte Representation (8192 bytes total)
+-----------------------------------------------------------------------------------+
|         HPKE KEM        | OHTTP Header |               Ciphertext                 |
| Uncompressed Public Key |  (7 bytes)   |        (8120 bytes = 8192-65-7)          +
|        (65 bytes)       |              +-----------------------------+------------+
|                         |              |     Padded BHTTP Request    |  AEAD Tag  |
|                         |              | (8104 bytes = 8192-65-16-7) | (16 bytes) |
+-----------------------------------------------------------------------------------+
</pre>

Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request
at the receiver's mailbox endpoint, which stores the HPKE encrypted payload to be
forwarded to the receiver.

The sender then polls OHTTP encapsulated GET requests to the sender's mailbox endpoint until it receives a
response from the directory containing a ''Proposal PSBT''. It stops polling after expiry.


===Optional sender parameters===

When a Payjoin sender POSTs an Original PSBT to the receiver,
[[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters| BIP 78's optional parameters]] are also valid as version 2 parameters.

HPKE binds ciphertexts to application-specific <code>info</code> strings.
Because of this domain separation, BIP 78's
<code>v</code> parameter is redundant and should be omitted for version 2.


====Receive Messaging====

After sharing the Payjoin URI with the sender, the receiver polls OHTTP
encapsulated GET requests to the receiver's mailbox endpoint.
So long as the mailbox contains no message, the directory responds with 202 ACCEPTED. Once a mailbox contains a message, the directory includes
it in the response body with status 200 OK.

Upon receiving a encapsulated 200 OK response, the receiver decrypts the payload and checks
the ''Original PSBT'' therein according to the
[[#receivers-original-psbt-checklist|checklist]].

The receiver then updates the ''Original PSBT'' to include new signed inputs and outputs, invalidating
sender signatures, and may adjust the fee. The result is called the ''Proposal PSBT''.

The receiver encrypts the ''Proposal PSBT'' to the sender's reply key according
to the HPKE protocol. The HPKE <code>info</code> string is <code>PjV2MsgB</code>.

<pre>
PjV2MsgB Byte Representation (7168 bytes total)
+---------------------------------------------------------------------------------------+
| ElligatorSwift |                             Ciphertext                               |
|   (64 bytes)   |                            (7104 bytes)                              |
|                +---------------------------------------------------------+------------+
|                |           Padded Plaintext                              |  AEAD Tag  |
|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |
+---------------------------------------------------------------------------------------+
</pre>

OHTTP encapsulated requests from the receivers have the same structure and
are thus indistinguishable from those of the sender.

===Receiver's Original PSBT checklist===

The receiver checklist is the same as the
[[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|
the BIP 78 receiver checklist]].

===Sender's Proposal PSBT checklist===

The version 2 sender's checklist is the same as the
[[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist|
the BIP 78 sender checklist]].

===Client/Directory interactions===

The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin
payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP
Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST
requests without OHTTP to mailbox URLs for backwards compatibility with Payjoin version 1 requests.

<!-- TODO emphasize long-polling is instantaneous when a message is received-->

====Relay/Directory interactions====

Directories accept requests from relays using their OHTTP Gateways. The gateway may
be found according to RFC 9540, at <code>/.well-known/ohttp-gateway</code>. GET
requests on the are used for
[[https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching|
RFC 9540 Key Configuration Fetching]]. POST requests are used to submit OHTTP
requests.

Relays may either be configured to allow forwarding to a specific gateway, or
probe directory hosts to check whether they accept requests. When the directory
receives GET requests to the <code>/.well-known/ohttp-gateway</code> path with
an <code>allowed_purposes</code> query parameter, The response body contains a
magic string in the same format as a TLS ALPN protocol list (a U16BE length
encoded list of U8 length encoded strings). The magic string is just "BIP77"
followed by a space and the specific 454403bb-9f7b-4385-b31f-acd2dae20b7e UUID,
offering an unambiguous signal to relays that this OHTTP gateway will accept
requests associated with this purpose from any relay.

By including this <code>allowed_purposes</code> parameter, the directory signals
to the OHTTP Gateway that it is willing to handle BIP 77 Payjoin version 2
requests, removing the RFC 9458's requirement that relays and Gateways be
configured in a one-to-one relationship. This requirement is removed to allow
receivers to choose directories and senders to choose relays independently of
each other. Otherwise senders would have to know which relay is appropriate to
use for which directory, creating a tendency for one directory and its
affiliated relays to monopolize the Payjoin version 2 protocol. This also
reduces the burden of configuring and operating a relay or directory.

==Rationale==

===Uppercase URL===

In order to simplify parsing and allow QR encoders to use
[[https://www.rfc-editor.org/rfc/rfc9285.html#name-the-alphabet-used-in-base45| Alphanumeric QR mode]],
which is more compact than Byte mode, the mailbox endpoint URL, including the fragment parameters, are encoded in uppercase.

Unlike Bitcoin URI parameters, which require switching back to Byte mode,
the use of the URL fragment for session-specific parameters makes it possible
to stay in Alphanumeric mode.

The <code>pj</code> parameter mailbox endpoint URL SHOULD be the last Bitcoin
URI parameter to avoid QR mode switching.

===Session Expiration===

The directory may hold a message for an offline payjoin peer until that peer comes online. However, the BIP 78
spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node|
recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naïve,
surveillance-vulnerable transaction which Payjoin intends to avoid.

Because BIP 78 is a synchronous protocol without a standard expiry mechanism.
Automated receivers are vulnerable to probing attacks, and should therefore
broadcast the Original PSBT after some expiration time.

Because BIP 77 is an asynchronous protocol, ir requires an explicit
[[#receiver-fragment-parameters| session-specific fragment parameter]] <code>EX</code> to specify this expiration.

===64-bit Short ID Length===

64 bits are sufficient to make the probability of experiencing a random collision negligible. As of writing,
the UTXO set has ~2^28 elements. This is a very loose upper bound for the number of concurrent (non-spam)
sessions, for which the probability of a random collision will be less than 1%. The actual number of
sessions will of course be (orders of magnitudes) lower given they are short lived. With ~2^21 sessions (a loose
bound on number of transactions that can be confirmed in 24 hours) the probability is less than 1e-6. These
figures bound the probability of a collision in the entire set, whereas the probability for an individual session to
experience a collision is << 1e-10 in either case.

===HTTP===

HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a
WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.

===Oblivious HTTP===

OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it
more difficult for a directory to correlate many payjoin transactions with specific IP addresses.

OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.

====OHTTP Sequence Diagram====

<img src=bip-0077/oblivious-http-sequence.png></img>

===Uniform Payloads===

Encapsulated OHTTP payloads seen by the relay and directory, and encrypted
messages seen by the directory are constructed to be uniform so that these
third-party services are unable to distinguish between them.

Encapsulated OHTTP messages are 8192 bytes long, and begin with cleartext OHTTP
header and an uncompressed key for the DHKEM which is distinguishable from
random bytes but uniform across different encapsulated requests.

End to end encrypted messages are 7168 bytes long, and should not be
distinguishable from uniformly random bytes. Elligator swift is used to encode
encapsulated HPKE public keys prepended to the HPKE ciphertext so that the
directory can't distinguish between key material, the ciphertext, and
randomness, so that the directory may accommodate new protocols in the future
without discrimination.

This is sufficient size for most PSBTs without exceeding the
[[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/|
8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image
sharing, making misuse of the directory impractical.

===Secp256k1 Hybrid Public Key Encryption===

Hybrid Public Key Encryption (HPKE) is a modern IETF standard for secure message
exchange without TLS.

Payjoin version 2 uses <code>DHKEM(Secp256k1, HKDF-SHA256)</code> and <code>ChaCha20Poly1305</code> AEAD
for both OHTTP encapsulation and for end to end encryption between the sender
and receiver.

The receiver transmits its receiver key in [[#receiver-fragment-parameters|
receiver fragment parameters]]. The sender shares its reply key in message A.
These keys are ephemeral and must only be used for a single Payjoin Session.

====Secp256k1-based DHKEM====

[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]]
is most appropriate because of secp256k1's availability in bitcoin contexts.

====ChaCha20Poly1305 AEAD====

This authenticated encryption with additional data
[[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized
in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high
performance. ChaCha20Poly1305 AEAD has been implemented
[[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]]
[[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as
well. This has widespread support in browsers, OpenSSL and libsodium.
AES-GCM is more widespread but is both older, slower, and not necessarily
already a dependency in bitcoin software.

====HKDF-SHA256====

SHA-256 is considered secure and is necessarily available in bitcoin contexts.

==Attack vectors==

In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.
mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.

Since each mailbox stores arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and
denial of service attacks. To mitigate such attacks, directory operators may impose an authentication
requirement before they allocate a Payjoin Session mailbox to receivers.

Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender
payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce
penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is
returned to a sender. However, such basic transactions that comply with the common-input-ownership heuristic are the
norm, so falling back to them is no worse than typical bitcoin transaction behavior.

===Network privacy===

Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This
requires an OHTTP Key Configuration to be shared in the Payjoin URI and for the directory to support Oblivious
HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in
bitcoin contexts.

Unlike BIP 78 implementations, sender and receiver peers will only see the IP
address of the directory and not that of their peers. A directory may additionally
be made available via Tor hidden service to allow either of the peers to protect
their IP from the directory without using an OHTTP relay (e.g. to avoid TLS when
relying on a relay), but the submitted request must still be OHTTP encapsulated
and submitted to the directory's OHTTP gateway.

==Backwards compatibility==

All payjoin versions use [[#payjoin-uri|bitcoin URIs]]. Receivers may choose to accept version 1 payloads. Since
version 1 payloads are neither encrypted nor authenticated, the directory acts as an
[[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server]]
in BIP 78 parlance, so backwards compatible receivers MUST enable <code>pjos=0</code> to disable output
substitution in order to prevent modification by a malicious directory.

A version 1 sender posts their request to the directory, which stores and forwards it to the version 2
receiver. A backwards compatible receiver proceeds with the version 1 checks if the encapsulated response
body is UTF-8 plaintext, signifying version 1. In order to service the request, a version 1 response must
be returned to the sender within 30 seconds or else the directory should respond
with an <code>unavailable</code> JSON error code as
[[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP
78]].

<!-- TODO move to BIP 21-specific section -->
Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-
based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel
Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it
MUST consider the entire URI invalid per BIP 21.

==Reference implementation==

A production reference implementation client can be found at
[[https://crates.io/crates/payjoin-cli]]. Source code for the clients, the
directory, and development kit may be found here:
[[https://github.com/payjoin/rust-payjoin]]. Source code for an Oblivious HTTP
relay implementation may be found here
[[https://github.com/payjoin/ohttp-relay]].
