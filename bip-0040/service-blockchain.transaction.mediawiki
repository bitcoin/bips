=Service: Blockchain Transaction=

This service provides methods to get information about transactions.

* Service type: <code>blockchain.transaction</code>
* Service vendor: <code>Electrum</code>

==Method: Guess Fee==

* Method name: <code>guess_fee</code>
* Introduced in: Bitcoin Forum (never implemented in Electrum)

''No information available.''

==Method: Broadcast==

* Method name: <code>broadcast</code>
* Introduced in: <code>0.1</code>

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>blockchain.transaction.broadcast</code>
|-
! Params [0]
| <code>string</code>
| <code>4a5e1e4baa4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33bb89f3a32518a88c34a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b1bc87f4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b618f76673e2cc77ab2127b7afdeda33b</code>
| The raw transaction.
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>string</code> or absent
| <code>a76242fce5753b4212f903ff33ac6fe66f2780f34bdb4b33b175a7815a11a98e</code> or <code>258: txn-mempool-conflict</code>
| The transaction hash or an error. Since <code>1.1</code> the error is not returned as a JSON-RPC result, but as a JSON-RPC error.
|}

==Method: Get==

* Method name: <code>get</code>
* Introduced in: <code>0.5</code>

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>blockchain.transaction.get</code>
|-
! Params [0]
| <code>string</code>
| <code>4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b</code>
| The transaction hash. Removed in: <code>1.1</code>
|-
! Params [1]
| <code>int</code>
| <code>346343</code>
| The block height.
|-
! Params [2]
| <code>boolean</code>
| <code>true</code> or <code>false</code>
| If verbose. Introduced in: <code>1.2</code>
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>string</code> or <code>object</code>
| <code>AABBCCDD</code> or <code>{}</code>
| A hexadecimal representation of the transaction, or a verbose coin-specific object.
|}

==Method: Get Merkle==

* Method name: <code>get_merkle</code>
* Introduced in: <code>0.2</code>

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>blockchain.transaction.get_merkle</code>
|-
! Params [0]
| <code>string</code>
| <code>4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b</code>
| The transaction hash.
|-
! Params [1]
| <code>int</code>
| <code>346343</code>
| The block height. Introduced in: <code>0.6</code>
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>object</code>
| <code>{ "merkle": [ "713d6c7e6ce7bbea708d61162231eaa8ecb31c4c5dd84f81c20409a90069cb24", "03dbaec78d4a52fbaf3c7aa5d3fccd9d8654f323940716ddf5ee2e4bda458fde" ], "block_height": 450538, "pos": 710 }</code>
| The transaction hash, optionally with merkle information.
|-
! Result ["block_height"]
| <code>int</code>
| <code>464353</code>
| The block height.
|-
! Result ["pos"]
| <code>int</code>
| <code>12</code>
| The position of the transaction in a block.
|-
! Result ["merkle"]
| <code>array</code> of <code>string</code>s
| <code>[ "928c4275dfd6270349e76aa5a49b355eefeb9e31ffbe95dd75fed81d219a23f8", "5f35bfb3d5ef2ba19e105dcd976928e675945b9b82d98a93d71cbad0e714d04e" ]</code>
| An array of merkle proof information.
|}

==Method: Get TSC Bitcoin Association Merkle==

* Method name: <code>get_tsc_merkle</code>
* Introduced in: Electrum Documentation (never implemented in Electrum)

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>blockchain.transaction.get_tsc_merkle</code>
|-
! Params [0]
| <code>string</code>
| <code>4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b</code>
| The transaction hash.
|-
! Params [1]
| <code>int</code>
| <code>553453</code>
| The block height.
|-
! Params [2]
| <code>string</code>
| <code>txid</code> or <code>tx</code>
| Return only transaction ID, or whole transaction. Default is transaction ID ("txid").
|-
! Params [3]
| <code>string</code>
| <code>block_hash</code>, <code>block_header</code>, or <code>merkle_root</code>
| The target type. The selected type is returned. Default is transaction ID ("block_hash").
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>object</code>
| <code>{ "composite": false, "index": 4, "nodes": [ "*", "*", "80c0100bc080eb0d2e205dc687056dc13c2079d0959c70cad8856fea88c74aba"], "proofType": "branch", "target": "29442cb6e2ee547fcf5200dfb1b4018f4fc5ce5a220bb5ec3729a686885692fc", "targetType": "block_hash", "txOrId": "ed5a81e439e1cd9139ddb81da80bfa7cfc31e323aea544ca92a9ee1d84b9fb2f" }</code>
| The merkle information.
|-
! Result ["composite"]
| <code>boolean</code>
| <code>false</code> or <code>true</code>
| Whether or not this is a composite merkle proof.
|-
! Result ["index"]
| <code>int</code>
| <code>4</code>
| The position index of the transaction in the block.
|-
! Result ["nodes"]
| <code>array</code> of <code>string</code>s
| <code>[ "*", "*", "80c0100bc080eb0d2e205dc687056dc13c2079d0959c70cad8856fea88c74aba"]</code>
| The list of hash pairs making up the merkle branch.
|-
! Result ["proofType"]
| <code>string</code>
| <code>branch</code> or <code>tree</code>
| The proof type.
|-
! Result ["target"]
| <code>string</code>
| <code>29442cb6e2ee547fcf5200dfb1b4018f4fc5ce5a220bb5ec3729a686885692fc</code>
| The target value.
|-
! Result ["targetType"]
| <code>string</code>
| <code>block_hash</code>, <code>block_header</code>, or <code>merkle_root</code>
| The same target type as in the request.
|-
! Result ["txOrId"]
| <code>string</code>
| <code>ed5a81e439e1cd9139ddb81da80bfa7cfc31e323aea544ca92a9ee1d84b9fb2f</code>
| Either the transaction hash or the whole transaction.
|}

==Method: ID from Position==

* Method name: <code>id_from_pos</code>
* Introduced in: <code>1.4</code>

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>blockchain.transaction.id_from_pos</code>
|-
! Params [0]
| <code>int</code>
| <code>553453</code>
| The block height.
|-
! Params [1]
| <code>int</code>
| <code>2</code>
| The transaction position in a block.
|-
! Params [2]
| <code>boolean</code>
| <code>true</code> or <code>false</code>
| If a merkle proof should be returned.
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>string</code> or <code>object</code>
| <code>fc12dfcb4723715a456c6984e298e00c479706067da81be969e8085544b0ba08</code> or <code>{ "tx_hash": "fc12dfcb4723715a456c6984e298e00c479706067da81be969e8085544b0ba08", "merkle": [ "928c4275dfd6270349e76aa5a49b355eefeb9e31ffbe95dd75fed81d219a23f8", "5f35bfb3d5ef2ba19e105dcd976928e675945b9b82d98a93d71cbad0e714d04e" ] }</code>
| The transaction hash, optionally with merkle information.
|-
! Result ["tx_hash"] (if <code>merkle</code> is <code>true</code>)
| <code>string</code>
| <code>fc12dfcb4723715a456c6984e298e00c479706067da81be969e8085544b0ba08</code>
| The hash of the transaction.
|-
! Result ["merkle"] (if <code>merkle</code> is <code>true</code>)
| <code>array</code> of <code>string</code>s
| <code>[ "928c4275dfd6270349e76aa5a49b355eefeb9e31ffbe95dd75fed81d219a23f8", "5f35bfb3d5ef2ba19e105dcd976928e675945b9b82d98a93d71cbad0e714d04e" ]</code>
| An array of merkle proof information.
|}