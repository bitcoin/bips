=Service: Example Publish-Subscribe=

This service is a pub/sub example service. It doesn't have any other purpose than testing.

* Service type: <code>example.pubsub</code>
* Service vendor: <code>Stratum</code>

==Method: Subscribe==

Subscribe on an event.

* Method name: <code>subscribe</code>

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>example.pubsub.subscribe</code>
|-
! Params [0] (<code>period</code>)
| <code>int</code>
| <code>12</code>
| Period to wait for next emission.
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>array</code>
| <code>["example.pubsub.time_event", "some-subscription-key"]</code>
| The subscription information.
|-
! Result [0] (<code>event</code>)
| <code>string</code>
| <code>example.pubsub.time_event</code>
| The subscription event name. In this case, it is <code>example.pubsub.time_event</code>.
|-
! Result [1] (<code>subscription_key</code>)
| <code>string</code>
| <code>some-subscription-key</code>
| The subscription key of the event subscription.
|}

==Method: Time Event==

The time event that gets emitted.

* Method name: <code>time_event</code>

{|
! <ins>[Notification]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>example.pubsub.time_event</code>
|-
! Params [0] (<code>t</code>)
| <code>int</code>
| <code>1231006505</code>
| The time when the time event was emitted.
|}

==Method: Unsubscribe==

Unsubscribe from an event.

* Method name: <code>unsubscribe</code>

{|
! <ins>[Request]</ins>
! Type
! Example
! Description
|-
! Method
| colspan="3" | <code>example.pubsub.unsubscribe</code>
|-
! Params [0] (<code>subscription_key</code>)
| <code>string</code>
| <code>some-subscription-key</code>
| The subscription key of the event subscription.
|-
! <ins>[Response]</ins>
! Type
! Example
! Description
|-
! Result
| <code>boolean</code>
| <code>true</code>
| True if subscription is removed from session, false if failed.
|}