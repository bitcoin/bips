# BIP: TBD
# Title: PQ-Derived Schnorr: Hybrid Post-Quantum and Schnorr Signatures
# Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online
# Status: Draft
# Type: Standards Track
# Created: 2025-07-02
# License: BSD-2-Clause

## Abstract

This BIP proposes **PQ-Derived Schnorr**, a hybrid signature scheme combining CRYSTALS-Dilithium (post-quantum) with Schnorr signatures (BIP340). The scheme enables **post-quantum secure transactions** while maintaining **compatibility with existing Bitcoin infrastructure**. Verification on-chain uses only a 64-byte Schnorr segment, while full Dilithium verification can be enforced by Tier-2/archive nodes. The proposal introduces a new Taproot leaf version and optional `OP_CHECKSIG_QES2` opcode to support hybrid verification.

## Motivation

Quantum computing poses an existential threat to elliptic curve cryptography. Shor’s algorithm renders discrete logarithm-based signatures (ECDSA, Schnorr) insecure. While NIST has standardized post-quantum signatures (e.g., CRYSTALS-Dilithium), direct integration into Bitcoin faces challenges:

- Large signature sizes (2–5 KB vs. 64 bytes for Schnorr).
- Different verification algorithms requiring new operations.
- Compatibility issues with Taproot and existing infrastructure.

**PQ-Derived Schnorr** addresses these by:

- Using **Dilithium off-chain** for quantum resistance.
- Using **Schnorr on-chain** for compatibility.
- Binding both components cryptographically, preventing mix-and-match attacks.

## Specification

### 1. Key Generation

- Generate Dilithium key pair: `(pk_dil, sk_dil)`.
- Generate Schnorr key pair: `(pk_sch, sk_sch)`.
- Hybrid key: `pk = (pk_dil, pk_sch)`.

### 2. Signing

1. Compute Dilithium signature `(c, z)` on message `m`.
2. Compute binding hash `h = H2(c || m)`.
3. Generate Schnorr signature `(R, s)` on `h`.
4. Hybrid signature: `σ = ((c, z), (R, s))`.

### 3. Verification

- **Classical Mode (default)**  
  - Compute `h = H2(c || m)`.
  - Verify `(R, s)` with `pk_sch`.  
  - Ensures lightweight on-chain validation (BIP340-compatible).

- **Full Hybrid Mode (Tier-2)**  
  - Verify Dilithium `(c, z)` with `pk_dil`.  
  - Verify Schnorr `(R, s)` with `pk_sch`.  
  - Provides full post-quantum security.

### 4. Bitcoin Script Integration

- **Taproot Leaf Extension**  

  ```
  OP_1 <pubkey_combined> OP_CHECKSIG_HYBRID
  ```

  - `pubkey_combined = (pk_dil, pk_sch)`  
  - `OP_CHECKSIG_HYBRID`: verifies Schnorr on-chain, binds Dilithium off-chain.

- **Soft Fork Opcode**  

  Introduce `OP_CHECKSIG_QES2`:

  ```
  Stack: [signature, pubkey]
  Parse σ = ((c,z),(R,s)), pk = (pk_dil, pk_sch)
  h = H2(c||message)
  result = Schnorr.Verify(pk_sch, h, (R,s))
  Push result
  ```

### 5. Transaction Format

- Public key: 33 bytes (unchanged).  
- Schnorr signature: 64 bytes (unchanged).  
- Witness: includes Dilithium challenge vector `c`.  
- Off-chain storage: full Dilithium `(c, z)`.

## Rationale

- **Efficiency**: Only Schnorr (64 bytes, O(λ) operations) is validated on-chain.  
- **Security**: Dilithium ensures quantum resistance; Schnorr ensures compatibility.  
- **Modularity**: Full verification is optional (archive/Tier-2 nodes).  
- **Backward compatibility**: Transactions look identical to Schnorr-only transactions on-chain.

## Backward Compatibility

- Nodes that do not upgrade see PQ-Derived Schnorr transactions as **standard Schnorr**.  
- Off-chain Dilithium verification is optional and does not break consensus.  
- New opcode (`OP_CHECKSIG_QES2`) can be introduced via **soft fork**.

## Security Considerations

- If Schnorr alone is relied upon, security collapses under quantum adversaries.  
- Full security requires Dilithium verification (Tier-2 nodes or optional validation).  
- Binding `h = H2(c || m)` prevents mixing Dilithium and Schnorr components.  
- Off-chain storage availability is required; redundancy mechanisms (IPFS, Arweave, etc.) are recommended.

## Reference Implementation

- CRYSTALS-Dilithium v3 (NIST PQC Standard).  
- BIP340 Schnorr (secp256k1).  
- Prototype implementation in C/Python available at: [link if applicable].

## References

- BIP 340: Schnorr Signatures for secp256k1  
- CRYSTALS-Dilithium, NIST PQC Standard  
- QES2_final.pdf (J1729 Research Team, 2025)  

7. Grover, L.K. "A Fast Quantum Mechanical Algorithm for Database Search." Proceedings of the 28th Annual ACM Symposium on Theory of Computing, 1996.
8. Bindel, N., et al. "Hybrid Key Encapsulation Mechanisms and Authenticated Key Exchange." Post-Quantum Cryptography, 2019.
9. Crockett, E., et al. "A Note on the Dual-Signature Approach to Key Confirmation." Cryptology ePrint Archive, Report 2021.
